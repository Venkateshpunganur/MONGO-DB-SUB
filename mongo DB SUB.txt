

ASSIGNMENT 1

1. get all documents
 db.movies.find().pretty()
{
        "_id" : ObjectId("60005fca0c2855354e1a2ff9"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("600060520c2855354e1a2ffa"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("600060740c2855354e1a2ffb"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("600061060c2855354e1a2ffc"),
        "title" : "The Hobbit: An Unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("600061370c2855354e1a2ffd"),
        "title" : "The Hobbit The Desolation of Smaug",
        "writer" : "J.R.R. Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("600061550c2855354e1a2ffe"),
        "title" : "The Hobbit The Battle of the Five Armies",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("600061790c2855354e1a2fff"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("600061940c2855354e1a3000"), "title" : "Avatar" }

2) get all documents with writer set to "Quentin Tarantino"
db.movies.find({writer: "Quentin Tarantino"})
db.movies.find({writer: "Quentin Tarantino"}).pretty()
{
        "_id" : ObjectId("600060520c2855354e1a2ffa"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("600060740c2855354e1a2ffb"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
3. get all documents where actors include "Brad Pitt"
db.movies.find({actors:”Brad Pitt”})
db.movies.find({actors:"Brad Pitt"})
{ "_id" : ObjectId("60005fca0c2855354e1a2ff9"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("600060740c2855354e1a2ffb"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
4)get all documents with franchise set to "The Hobbit".
db.movies.find({franchise: "The Hobbit"})
5) get all movies released in the 90s
db.movies.find({year:{$gt:1990,$lt:2000}})
6) get all movies released before the year 2000 or after 2010
db.movies.find({$or:[{year:{$gt:2010}},{year:{$lt:”2000}}]}


UPDATE DOCUMENTS
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."

ans:db.movies.update({_id:ObjectId("600061060c2855354e1a2ffc")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."

ans:db.movies.update({_id:ObjectId("600061370c2855354e1a2ffd")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"

ans:db.movies.update({_id:ObjectId("600061790c2855354e1a2fff")}, {$push:{actors:"Samuel L. Jackson"}})

TEXT SEARCH

1)find all movies that have a synopsis that contains the word "Bilbo"
ans:db.movies.find({synopsis:{$regex:"Bilbo"}})
2)find all movies that have a synopsis that contains the word "Gandalf"
ans:db.movies.find({synopsis:{$regex:"Gandalf"}})
3)find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
ans:db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
4)find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
ans:db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})
5)find all movies that have a synopsis that contains the word "gold" and "dragon"
ans:db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})


DELETE DOCUMENTS
1)delete the movie "Pee Wee Herman's Big Adventure"
ans:db.movies.remove({_id:ObjectId("600061790c2855354e1a2fff")})
2)delete the movie "Avatar"
ans:db.movies.remove({_id:ObjectId("600061940c2855354e1a3000")})


RELATIONSHIPS

USERS COLLECTION
username : GoodGuyGreg
first_name : "Good Guy"
last_name : "Greg"

ans:db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})

username : ScumbagSteve
full_name :
  first : "Scumbag"
  last : "Steve"

ans:db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})

 POSTS COLLECTION
username : GoodGuyGreg
title : Passes out at party
body : Wakes up early and cleans house

ans:db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})

username : GoodGuyGreg
title : Steals your identity
body : Raises your credit score

ans:db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})

username : GoodGuyGreg
title : Reports a bug in your code
body : Sends you a Pull Request

ans:db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})

username : ScumbagSteve
title : Borrows something
body : Sells it

ans:db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})

username : ScumbagSteve
title : Borrows everything
body : The end

ans:db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})

username : ScumbagSteve
title : Forks your repo on github
body : Sets to private

ans:db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})

COMMENTS COLLECTION

username : GoodGuyGreg
comment : Hope you got a good deal!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

ans:db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("60051caa2223df2a5b0081a8")})

username : GoodGuyGreg
comment : What's mine is yours!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

ans:db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("60051caa2223df2a5b0081a8")})

username : GoodGuyGreg
comment : Don't violate the licensing agreement!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github

ans:db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("60051cbf2223df2a5b0081aa")})

username : ScumbagSteve
comment : It still isn't clean
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"

ans:db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("60051c822223df2a5b0081a5")})

username : ScumbagSteve
comment : Denied your PR cause I found a hack
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"

ans:db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("60051ca02223df2a5b0081a7")})

QUIERY COLLECTIONS

find all users
ans:db.users.find().pretty()
find all posts
ans:db.posts.find().pretty()
find all posts that was authored by "GoodGuyGreg"
ans:db.posts.find({username:"GoodGuyGreg"})
find all posts that was authored by "ScumbagSteve"
ans:db.posts.find({username:"ScumbagSteve"})
find all comments
ans:db.comments.find().pretty()
find all comments that was authored by "GoodGuyGreg"
ans:db.comments.find({username:"GoodGuyGreg"})
find all comments that was authored by "ScumbagSteve"
ans:db.comments.find({username:"ScumbagSteve"})
find all comments belonging to the post "Reports a bug in your code"
ans:db.comments.find({title:"Reports a bug in your code"})


ASSIGNMENT 2

ATLANTA POPULATION
1. use db.zipcodes.find() to filter results to only the results where city is ATLANTA
and state is GA.
ans:db.zipcodes.find({city:"ATLANTA",state:"GA"})

2. use db.zipcodes.aggregate with $match to do the same as above.
ans:db.zipcodes.aggregate([{$match:{city:"ATLANTA"},{state:"GA"}}])

3. use $group to count the number of zip codes in Atlanta.
ans:db.zipcodes.aggregate({$group:{count:{$sum:1}}})

4. use $group to find the total population in Atlanta.
ans:db.population.aggregate({$group:{sum:{$sum:0}}})

POPULATIONS BY STATE
1. use aggregate to calculate the total population for each state
ans:db.population.aggregate({$sum:0},{$sort:{state:1}})
2. sort the results by population, highest first
ans:db.population.aggregate({$sum:0},{$sort:{state:-1}})
3. limit the results to just the first 3 results. What are the top 3 states in
population?
ans:db.population.aggregate({$sum:0},{$sort:{state:-1}},{$limit:3})

POPULATIONS BY CITY
1. use aggregate to calculate the total population for each city (you have to use
city/state combination). You can use a combination for the _id of the $group: {
city: '$city', state: '$state' }
ans:db.population.aggregate({{$sum:0},$group:{city:'$city',state:'$state'}})
2. sort the results by population, highest first
ans:db.population.aggregate({{$sum:0},$group:{city:'$city',state:'$state'},{$sort:-1}})
3. limit the results to just the first 3 results. What are the top 3 cities in
population?
ans:db.population.aggregate({{$sum:0},$group:{city:'$city',state:'$state'},{$sort:-1},{$limit:3}})
4. What are the top 3 cities in population in Texas?
ans:db.population.aggregate({{city:"Texas"},{$sort:-1},{$limit:3}})

BONUS
1. Write a query to get the average city population for each state.
db.population.aggregate({$group:{$avg:city},{$sort:state}})
2. What are the top 3 states in terms of average city population?
db.population.aggregate({$group:{$avg:city}},{$limit:3})


ASSIGNMENT 3

Write a MongoDB query to display all the documents in the collection restaurants.--
db.addresses.find().pretty()


Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.--
db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}).pretty()


Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.--
db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1,"_id":0}).pretty()


Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.--
db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1,"_id":0}).pretty()


Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.--
db.addresses.find({"borough": "Bronx"}).limit(5).pretty()


Write a MongoDB query to display all the restaurant which is in the borough Bronx.--
db.addresses.find({"borough": "Bronx"}).pretty()


Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.--
db.addresses.find({"borough": "Bronx"}).skip(5).limit(5).pretty()


Write a MongoDB query to find the restaurants who achieved a score more than 90.--
db.addresses.find({grades : { $elemMatch:{"score":{$gt : 90}}}}).pretty()


Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.--
db.addresses.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}}).pretty()


Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.--
db.addresses.find({"address.coord" : {$lt : -95.754168}}).pretty()


Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168--.
db.addresses.find( {$and: [ {"cuisine" : { $ne :"American "}}, {"grades.score" : {$gt : 70}}, {"address.coord" : {$lt : -65.754168}} ] } ).pretty()


Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.--
db.addresses.find( { "cuisine" : {$ne : "American "}, "grades.score" :{$gt: 70}, "address.coord" : {$lt : 65.754168} } ).pretty()


Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.--
db.addresses.find( { "cuisine" : {$ne : "American "}, "grades.grade" :"A", "borough": {$ne : "Brooklyn"} } ).sort({"cuisine":-1}).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.--
db.addresses.find( {name: /^Wil/}, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.--
db.addresses.find( {name: /ces$/}, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.--
db.addresses.find( {"name": /.*Reg.*/}, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.--
db.addresses.find( {  "borough": "Bronx" ,  $or : [ { "cuisine" : "American " }, { "cuisine" : "Chinese" } ] } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.--
db.addresses.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.--
db.addresses.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.--
db.addresses.find( {"grades.score" : { $not:  {$gt : 10} } }, { "restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1 } ).pretty()


Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'.--
db.addresses.find( {$or: [ {name: /^Wil/}, {"$and": [ {"cuisine" : {$ne :"American "}}, {"cuisine" : {$ne :"Chinese"}} ]} ]} ,{"restaurant_id" : 1, "name":1, "borough":1, "cuisine" :1} ).pretty()


Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.--
db.addresses.find( { "grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade":"A" , "grades.score" : 11 }, {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()


Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z"--
db.addresss.find( { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade":"A" , "grades.1.score" : 9 }, {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()


Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.--
db.addresses.find( { "address.coord.1": {$gt : 42, $lte : 52} }, {"restaurant_id" : 1,"name":1,"address":1,"coord":1} ).pretty()


Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.--
db.addresses.find().sort({"name":1}).pretty()


Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.--
db.addresses.find().sort({"name":-1}).pretty()


Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.--
db.addresses.find().sort( {"cuisine":1,"borough" : -1,} ).pretty()


Write a MongoDB query to know whether all the addresses contains the street or not.--
db.addresses.find( {"address.street" : { $exists : true } } ).pretty()


Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.--
db.addresses.find( {"address.coord" : {$type : 1} } ).pretty()


Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.--
db.addresses.find( {"grades.score" : {$mod : [7,0]} }, {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()


Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.--
db.restaurants.find( { name :  { $regex : "mon.*", $options: "i" } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1} ).pretty()


Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.--
db.restaurants.find( { name : { $regex : /^Mad/i, } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1 } ).pretty()
